import Data.List (sortBy)
import Data.Ord (comparing)

-- HC1T1 - Task 1: Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double

-- HC1T2 - Task 2: Pure Function Example
circleArea :: Float -> Float
circleArea r = pi * r * r

-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18

-- HC1T4 - Task 4: Composing a Function to Process Player Data

extractPlayers :: [(String, Int)] -> [String]
extractPlayers players = map fst players

sortByScore :: [(String, Int)] -> [(String, Int)]
sortByScore players = sortBy (flip (comparing snd)) players

topThree :: [(String, Int)] -> [(String, Int)]
topThree players = take 3 players

getTopThreePlayers :: [(String, Int)] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Int]
infiniteNumbers = [1..]

takeN :: Int -> [Int]
takeN n = take n infiniteNumbers

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y

-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Float -> Float
fToC f = (f - 32) * 5 / 9

-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Main to demonstrate usage (optional for testing)
main :: IO ()
main = do
    putStrLn $ "HC1T1: doubleThenIncrement 3 = " ++ show (doubleThenIncrement 3)
    putStrLn $ "HC1T2: circleArea 5 = " ++ show (circleArea 5)
    putStrLn $ "HC1T3: greaterThan18 10 = " ++ show (greaterThan18 10)
    let players = [("Alice", 50), ("Bob", 75), ("Charlie", 60), ("Dave", 90)]
    putStrLn $ "HC1T4: Top 3 players = " ++ show (getTopThreePlayers players)
    putStrLn $ "HC1T5: First 5 numbers = " ++ show (takeN 5)
    putStrLn $ "HC1T6: addNumbers 4 7 = " ++ show (addNumbers 4 7)
    putStrLn $ "HC1T7: fToC 98.6 = " ++ show (fToC 98.6)
    putStrLn $ "HC1T8: applyTwice (+3) 4 = " ++ show (applyTwice (+3) 4)
