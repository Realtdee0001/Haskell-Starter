-- HC6T1: Factorial (Recursive)
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- HC6T2: Fibonacci (Recursive)
fibonacci :: Integer -> Integer
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

-- HC6T3: Sum of Elements Using foldr
sumList :: [Int] -> Int
sumList = foldr (+) 0

-- HC6T4: Product of Elements Using foldl
productList :: [Int] -> Int
productList = foldl (*) 1

-- HC6T5: Reverse a List (Recursive)
reverseList :: [a] -> [a]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

-- HC6T6: Element Exists in List
elementExists :: Eq a => a -> [a] -> Bool
elementExists _ [] = False
elementExists e (x:xs) = (e == x) || elementExists e xs

-- HC6T7: List Length
listLength :: [a] -> Int
listLength [] = 0
listLength (_:xs) = 1 + listLength xs

-- HC6T8: Filter Even Numbers
filterEvens :: [Int] -> [Int]
filterEvens = filter even

-- HC6T9: Map Implementation
mapFunction :: (a -> b) -> [a] -> [b]
mapFunction _ [] = []
mapFunction f (x:xs) = f x : mapFunction f xs

-- HC6T10: Digits of a Number (Recursive)
digits :: Integer -> [Int]
digits n
  | n < 10 = [fromIntegral n]
  | otherwise = digits (n `div` 10) ++ [fromIntegral (n `mod` 10)]

-- Main to test all functions
main :: IO ()
main = do
  putStrLn "-- HC6T1: Factorial --"
  print $ factorial 5 -- 120

  putStrLn "-- HC6T2: Fibonacci --"
  print $ fibonacci 10 -- 55

  putStrLn "-- HC6T3: Sum of List --"
  print $ sumList [1, 2, 3, 4, 5] -- 15

  putStrLn "-- HC6T4: Product of List --"
  print $ productList [1, 2, 3, 4, 5] -- 120

  putStrLn "-- HC6T5: Reverse List --"
  print $ reverseList [1, 2, 3, 4] -- [4,3,2,1]

  putStrLn "-- HC6T6: Element Exists --"
  print $ elementExists 3 [1, 2, 3, 4] -- True
  print $ elementExists 5 [1, 2, 3, 4] -- False

  putStrLn "-- HC6T7: List Length --"
  print $ listLength [10, 20, 30] -- 3

  putStrLn "-- HC6T8: Filter Evens --"
  print $ filterEvens [1..10] -- [2,4,6,8,10]

  putStrLn "-- HC6T9: Map Function --"
  print $ mapFunction (*2) [1, 2, 3] -- [2,4,6]

  putStrLn "-- HC6T10: Digits of a Number --"
  print $ digits 12345 -- [1,2,3,4,5]
