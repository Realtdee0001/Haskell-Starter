module Main where

import Data.Char (toUpper)
import Data.List (nub, group, sort)

--------------------------------------------------------------------------------
-- HC16T1: Reverse a String
--------------------------------------------------------------------------------
reverseString :: String -> String
reverseString = reverse

--------------------------------------------------------------------------------
-- HC16T2: Palindrome Checker
--------------------------------------------------------------------------------
isPalindrome :: String -> Bool
isPalindrome s = s == reverse s

--------------------------------------------------------------------------------
-- HC16T3: Factorial
--------------------------------------------------------------------------------
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

--------------------------------------------------------------------------------
-- HC16T4: Filter Even Numbers
--------------------------------------------------------------------------------
filterEvens :: [Int] -> [Int]
filterEvens = filter even

--------------------------------------------------------------------------------
-- HC16T5: Uppercase String
--------------------------------------------------------------------------------
toUppercase :: String -> String
toUppercase = map toUpper

--------------------------------------------------------------------------------
-- HC16T6: nth Fibonacci Number
--------------------------------------------------------------------------------
fibonacci :: Int -> Integer
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

--------------------------------------------------------------------------------
-- HC16T7: Element Existence in List
--------------------------------------------------------------------------------
elementExists :: Eq a => a -> [a] -> Bool
elementExists = elem

--------------------------------------------------------------------------------
-- HC16T8: Insertion Sort
--------------------------------------------------------------------------------
insertionSort :: [Int] -> [Int]
insertionSort [] = []
insertionSort (x:xs) = insert x (insertionSort xs)
  where
    insert y [] = [y]
    insert y (z:zs)
      | y <= z    = y:z:zs
      | otherwise = z : insert y zs

--------------------------------------------------------------------------------
-- HC16T9: Remove Duplicates from List
--------------------------------------------------------------------------------
removeDuplicates :: Eq a => [a] -> [a]
removeDuplicates = nub

--------------------------------------------------------------------------------
-- HC16T10: Character Frequency in String
--------------------------------------------------------------------------------
charFrequency :: String -> [(Char, Int)]
charFrequency s = map (\g -> (head g, length g)) . group . sort $ s

--------------------------------------------------------------------------------
-- Main Demo
--------------------------------------------------------------------------------
main :: IO ()
main = do
  putStrLn "== HC16T1: Reverse a String =="
  print (reverseString "Haskell")

  putStrLn "\n== HC16T2: Palindrome Checker =="
  print (isPalindrome "madam")
  print (isPalindrome "hello")

  putStrLn "\n== HC16T3: Factorial =="
  print (factorial 5)

  putStrLn "\n== HC16T4: Filter Even Numbers =="
  print (filterEvens [1..10])

  putStrLn "\n== HC16T5: Uppercase String =="
  print (toUppercase "haskell is fun")

  putStrLn "\n== HC16T6: nth Fibonacci Number =="
  print (fibonacci 10)

  putStrLn "\n== HC16T7: Element Existence in List =="
  print (elementExists 5 [1..10])
  print (elementExists 15 [1..10])

  putStrLn "\n== HC16T8: Insertion Sort =="
  print (insertionSort [5,3,8,1,2])

  putStrLn "\n== HC16T9: Remove Duplicates from List =="
  print (removeDuplicates [1,2,2,3,4,4,5,5,5,6])

  putStrLn "\n== HC16T10: Character Frequency in String =="
  print (charFrequency "haskellhaskell")
