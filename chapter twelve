module Main where

import Data.Char (toLower)
import Data.List (sort)
import System.IO
import System.IO.Error (catchIOError)

-- HC12T1: Print a Welcome Message
hc12t1 :: IO ()
hc12t1 = putStrLn "Welcome to Haskell Programming!"

-- HC12T2: Add Two Numbers
addTwoNumbers :: Int -> Int -> Int
addTwoNumbers x y = x + y

hc12t2 :: IO ()
hc12t2 = do
    let a = 5
    let b = 7
    putStrLn $ "Sum: " ++ show (addTwoNumbers a b)

-- HC12T3: Factorial Function
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

hc12t3 :: IO ()
hc12t3 = do
    let n = 5
    putStrLn $ "Factorial of " ++ show n ++ " is " ++ show (factorial n)

-- HC12T4: First 10 Fibonacci Numbers
fibonacci :: Int -> Int
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

hc12t4 :: IO ()
hc12t4 = print $ map fibonacci [0..9]

-- HC12T5: Palindrome Checker
isPalindrome :: String -> Bool
isPalindrome str = cleaned == reverse cleaned
  where cleaned = map toLower $ filter (/= ' ') str

hc12t5 :: IO ()
hc12t5 = do
    let testStr = "Madam"
    putStrLn $ testStr ++ if isPalindrome testStr
                          then " is a palindrome"
                          else " is not a palindrome"

-- HC12T6: Sort a List of Integers
hc12t6 :: IO ()
hc12t6 = do
    let nums = [42, 7, 19, 3, 25]
    putStrLn $ "Original list: " ++ show nums
    putStrLn $ "Sorted list:   " ++ show (sort nums)

-- HC12T7: Calculate Circle Area
calculateCircleArea :: Double -> Double
calculateCircleArea r = pi * r * r

hc12t7 :: IO ()
hc12t7 = do
    let r = 3.5
    putStrLn $ "Area of circle with radius " ++ show r ++ " = " ++ show (calculateCircleArea r)

-- HC12T8: Merge Two Sorted Lists
mergeLists :: Ord a => [a] -> [a] -> [a]
mergeLists xs [] = xs
mergeLists [] ys = ys
mergeLists (x:xs) (y:ys)
    | x < y     = x : mergeLists xs (y:ys)
    | otherwise = y : mergeLists (x:xs) ys

hc12t8 :: IO ()
hc12t8 = do
    let l1 = [1, 3, 5, 7]
    let l2 = [2, 4, 6, 8]
    putStrLn $ "Merged list: " ++ show (mergeLists l1 l2)

-- HC12T9: Read and Print File Content
hc12t9 :: IO ()
hc12t9 = do
    let filename = "test.txt"
    content <- catchIOError (readFile filename) handler
    putStrLn content
  where
    handler _ = return "Error: File does not exist."

-- HC12T10: Mathematical Operations Module
-- Weâ€™ll simulate a small module inside this file
add :: Int -> Int -> Int
add x y = x + y

multiply :: Int -> Int -> Int
multiply x y = x * y

hc12t10 :: IO ()
hc12t10 = do
    let a = 6
    let b = 9
    putStrLn $ "Add: " ++ show (add a b)
    putStrLn $ "Multiply: " ++ show (multiply a b)

-- Choose which task to run
main :: IO ()
main = hc12t1   -- change to hc12t2, hc12t3 ... hc12t10
